/**
 * Service Auth
 * API dashboard
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent,
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs/Observable';

import { ErrorResponseDto } from '../model/errorResponseDto';
import { RequestSinMoradorDto } from '../model/requestSinMoradorDto';
import { ResponseSinMoradorDto } from '../model/responseSinMoradorDto';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';


@Injectable()
export class SinMoradorService {

    protected basePath = 'http://localhost/v1/dashboard/tecnicos';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(
        protected httpClient: HttpClient,
        @Optional() @Inject(BASE_PATH) basePath: string,
        @Optional() configuration: Configuration,
        ) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     *
     *
     * @param requestSinMoradorDto
     * @param observe set whether or not to return the data Observable as the body, response or events.
     * Defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sinMoradorPost(
        requestSinMoradorDto: RequestSinMoradorDto,
        observe?: 'body',
        reportProgress?: boolean): Observable<ResponseSinMoradorDto>;
    public sinMoradorPost(
        requestSinMoradorDto: RequestSinMoradorDto,
        observe?: 'response',
        reportProgress?: boolean): Observable<HttpResponse<ResponseSinMoradorDto>>;
    public sinMoradorPost(
        requestSinMoradorDto: RequestSinMoradorDto,
        observe?: 'events',
        reportProgress?: boolean): Observable<HttpEvent<ResponseSinMoradorDto>>;
    public sinMoradorPost(
        requestSinMoradorDto: RequestSinMoradorDto,
        observe: any = 'body',
        reportProgress: boolean = false): Observable<any> {

        if (requestSinMoradorDto === null || requestSinMoradorDto === undefined) {
            throw new Error(
                'Required parameter requestSinMoradorDto was null or undefined when calling sinMoradorPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.apiKeys['Authorization']) {
            headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json',
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResponseSinMoradorDto>(`${this.basePath}/sin-morador`,
            requestSinMoradorDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress,
            },
        );
    }

}
